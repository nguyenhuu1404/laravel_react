import Head from 'next/head'
import { Inter } from 'next/font/google'
import { useEffect, useState } from "react"
import { editUserApi, getUserApi } from '@/services/API.services'
import { toast } from 'react-toastify';
import { useRouter } from "next/router"
import Link from 'next/link'
import { useForm } from "react-hook-form"
import { yupResolver } from "@hookform/resolvers/yup"
import userRules from '@/validate/userRules';

const inter = Inter({ subsets: ['latin'] })

export default function Index() {
    const router = useRouter()
    const [user, setUser] = useState([])

    const formOptions = { resolver: yupResolver(userRules) };
    const { register, handleSubmit, setValue, formState } = useForm(formOptions);
    const { errors, isValid, isSubmitting } = formState

    const userStatus = [
        {
            value: 1,
            label: 'Active',
        },
        {
            value: 2,
            label: 'Suspended',
        },
        {
            value: 3,
            label: 'Deleted',
        },
    ];
    
    useEffect(() => {
        const { id } = router.query
        if (id) {
            getUser(id)
        }
    }, [router.query])

    useEffect(() => {
        if (user) {
            setValue('email', user.email)
            setValue('first_name', user.first_name)
            setValue('last_name', user.last_name)
            setValue('status', user.status)
        }
      }, [user])

    const getUser = async (id) => {
        try {
            const res = await getUserApi(id)
            setUser(res.data)
        } catch (e) {
            toast.error(e.message)
        }
    }

    const handleUpdateUser = async (data) => {
        try {
            setTimeout(() => {
                console.log("Delayed for 1 second.");
              }, 10000)
            const res = await editUserApi(user.id, data)
            if (res.status) {
                toast.success(res.message)
                router.push('/users')
            }
        } catch (e) {
            toast.error(e.message)
        }
    }

  return (
    <>
        <Head>
            <title>Update user</title>
            <meta name="description" content="Generated by create next app" />
            <meta name="viewport" content="width=device-width, initial-scale=1" />
            <link rel="icon" href="/favicon.ico" />
        </Head>
        <main className="container">
            <h2>Update user</h2>
            <div className="create-user">
                <form onSubmit={handleSubmit(handleUpdateUser)} className="row g-3">
                    <div className="col-md-6">
                        <label className="form-label">First Name</label>
                        <input
                            {...register("first_name")}
                            type="text"
                            className="form-control"
                            placeholder="First name"
                        />
                        {errors.first_name && <div className="alert alert-danger ml-2 mt-2">{errors.first_name?.message}</div>}
                    </div>
                    <div className="col-6">
                        <label className="form-label">Last Name</label>
                        <input
                            {...register("last_name")}
                            type="text"
                            className="form-control"
                            placeholder="Last name"
                        />
                        {errors.last_name && <div className="alert alert-danger ml-2 mt-2">{errors.last_name?.message}</div>}
                    </div>
                    <div className="col-md-6">
                        <label className="form-label">Email</label>
                        <input
                            {...register("email")}
                            type="email" 
                            className="form-control"
                            placeholder="Email"
                        />
                        {errors.email && <div className="alert alert-danger ml-2 mt-2">{errors.email?.message}</div>}
                    </div>
                    <div className="col-md-6">
                        <label className="form-label">Status</label>
                        <select {...register("status")}
                            class="form-select">
                            {
                                userStatus.map((item, key) => {
                                    return (
                                        <option key={`status-${key}`} selected={user.status == item.value} value={item.value}>{item.label}</option>
                                    )
                                })
                            }
                        </select>
                    </div>

                    <div>
                        <Link href="/users">
                            <button className="btn btn-secondary" variant="secondary">Back</button>
                        </Link>
                        <button disabled={!isValid || isSubmitting} className="btn btn-primary ms-2" type="submit" variant="primary">Save</button>
                    </div>
                </form>
            </div>
        </main>
    </>
  )
}
